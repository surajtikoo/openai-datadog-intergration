<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.1.0</version>
		<relativePath /> <!-- lookup parent from repository -->
		
	</parent>


// Select the specific table using an ID or class
const table = document.querySelector('#myTable'); // Replace with the specific table ID or class

if (table) {
    // Select only rows with the class 'machine-odd' or 'machine-even' within the table
    const rows = table.querySelectorAll('tr.machine-odd, tr.machine-even');

    // Initialize arrays to store the extracted data
    const quantities = [];
    const salesAmounts = [];

    // Loop through each row and process valid rows
    rows.forEach((row, index) => {
        const quantityCell = row.querySelector('[data-test="Quantity"]');
        const salesAmountCell = row.querySelector('[data-test="Sales Amount"]');

        if (quantityCell && salesAmountCell) {
            // Get and clean the text content of Quantity cell
            const quantityText = quantityCell.textContent.trim();

            // Exclude rows where Quantity is blank or contains only &nbsp;
            if (quantityText && quantityText !== "\u00a0") {
                quantities.push(quantityText);
                salesAmounts.push(salesAmountCell.textContent.trim());
            } else {
                console.warn(`Skipped row ${index + 1}: Blank or invalid Quantity`);
            }
        } else {
            console.warn(`Skipped row ${index + 1}: Missing required cells`);
        }
    });

    // Log the results
    console.log('Quantities:', quantities);
    console.log('Sales Amounts:', salesAmounts);
} else {
    console.error('Table not found!');
}







	<groupId>com.javatechie</groupId>
	<artifactId>openai</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<name>chatgpt-bot</name>
	<description>This is a sample application created to integrate with Open AI send metrics to Datadog</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.datadoghq/dd-trace-api -->
		<dependency>
			<groupId>com.datadoghq</groupId>
			<artifactId>dd-trace-api</artifactId>
			<version>1.34.0</version>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<repositories>
		<repository>
			<id>datadog</id>
			<url>https://mvnrepository.com/artifact/com.datadoghq/dd-trace-api</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
