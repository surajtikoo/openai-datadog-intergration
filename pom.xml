<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.1.0</version>
		<relativePath /> <!-- lookup parent from repository -->
		
	</parent>


document.addEventListener("DOMContentLoaded", () => {
    // Get the table by its ID
    const table = document.getElementById("target-table");

    if (!table) {
        console.error("Table with the specified ID not found.");
        return;
    }

    // Select rows with dynamic classes like "machine-odd" and "machine-even"
    const rows = table.querySelectorAll("tr[class^='machine-']");

    // Initialize an array to store the filtered data
    const rowData = [];

    // Iterate over the rows
    rows.forEach(row => {
        const totalCostCell = row.querySelector('[data-test="Total Cost"]');

        // Check if Total Cost is not blank or &nbsp
        if (totalCostCell && totalCostCell.textContent.trim() !== "" && totalCostCell.textContent.trim() !== '\u00A0') {
            // Extract values from the row
            const quantity = parseFloat(row.querySelector('[data-test="Quantity"]')?.textContent.trim()) || 0;
            const percentage = parseFloat(row.querySelector('[data-test="Percentage"]')?.textContent.trim()) || 0;
            const fair = parseFloat(row.querySelector('[data-test="Fair"]')?.textContent.trim()) || 0;

            // Calculate the product of Quantity, Percentage, and Fair
            const result = quantity * percentage * fair;

            // Push the extracted data and result into the array
            rowData.push({
                quantity,
                percentage,
                fair,
                totalCost: parseFloat(totalCostCell.textContent.trim()),
                result
            });
        }
    });

    // Store the filtered data in localStorage
    localStorage.setItem("tableRowData", JSON.stringify(rowData));

    // Retrieve and log the data from localStorage for verification
    const storedData = JSON.parse(localStorage.getItem("tableRowData"));
    console.log("Stored Data:", storedData);
});


	<groupId>com.javatechie</groupId>
	<artifactId>openai</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<name>chatgpt-bot</name>
	<description>This is a sample application created to integrate with Open AI send metrics to Datadog</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/com.datadoghq/dd-trace-api -->
		<dependency>
			<groupId>com.datadoghq</groupId>
			<artifactId>dd-trace-api</artifactId>
			<version>1.34.0</version>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<repositories>
		<repository>
			<id>datadog</id>
			<url>https://mvnrepository.com/artifact/com.datadoghq/dd-trace-api</url>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
